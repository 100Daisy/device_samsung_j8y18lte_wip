
declare -A __pulled_files__=() paths_map=() deps_map=() ignored=() prefix_map=()

f() { file=$1;}
p() {
    [[ -z "${paths_map[$file]}" ]] &&
        paths_map[$file]="$1" ||
        paths_map[$file]+=" $1"
}
d() { deps_map[$file]+="$1 "; }

load() {
    head -n 1 $1 | grep -qxF "# Generated by blob_tool.sh" || return 1
    paths_map=()
    deps_map=()
    echo Loading $1 > /dev/stderr
    source $1 || return 2
}

save() {
    local file i
    {
        echo "# Generated by blob_tool.sh"
        for file in ${!paths_map[@]}
        do
            printf "f %s\n" $file
            for i in ${paths_map[$file]}
            do
                printf "p %s\n" "${i}"
            done
            for i in ${deps_map[$file]}
            do
                printf "d %s\n" "${i}"
            done
        done
    } > $1 || return 1
}

scan() {
    paths_map=()
    deps_map=()
    local file dep local list="" nl="
"
    printf "Files to scan: many" > /dev/stderr
    local sdir=${1%/}
    test -d $sdir || return 1
    for file in `find $sdir -type f`
    do
        local b=$(basename $file)
        paths_map[$b]+="${file#${sdir}/} "
    done
    for file in ${!paths_map[@]}
    do
        list+=$file$nl
    done
    local nfiles=${#paths_map[@]}
    for file in ${!paths_map[@]}
    do
        ((nfiles--))
        printf "    \rFiles to scan: %s" "$nfiles" > /dev/stderr
        declare -A cdep=()
        for dep in $(cd $sdir;grep -Foa "${list}" ${paths_map[$file]})
        do
            if [[ "$dep" != "$file" ]]
            then
                cdep[$dep]=y
            fi
        done
        if [[ $file =~ .*@[0-9].[0-9]-service.*  ]] && [[ -n "${paths_map[${file/-service/-impl}.so]}" ]]
        then
            cdep[${file/-service/-impl}.so]=y
        fi
        deps_map[$file]=${!cdep[@]}
    done
    echo > /dev/stderr
}

__pull_recursive() {
    [[ -n "${written[$1]}" ]] && return
    [[ -n "${ignored[$1]}" ]] && return
    if [[ -z "${paths_map[$1]}" ]]
    then
        echo "Error: $1"
        return
    fi
    local i
    written[$1]=y
    __pulled_files__[$1]+="$category "
    for i in ${deps_map[$1]}
    do
        __pull_recursive $i
    done
}

ignore() { ignored[$1]=y; }

pull_match_path() {
    if [[ $# -eq 1 ]]
    then
        local category=none
    else
        local category=$1
        shift 1
    fi
    local pat="${@}"
    pat=${pat// /|}
    for i in ${paths_map[@]}
    do
        if [[ "$i" =~ $pat ]]
        then
            local -A written=()
            __pull_recursive $(basename $i);
        fi
    done
}

reset() {
    ignored=()
    prefix_map=()
    __pulled_files__=()
}

pull() {
    if [[ $# -eq 1 ]]
    then
        local category=none
    else
        local category=$1
        shift 1
    fi
    while [[ $# -gt 0 ]]
    do
        local -A written=()
        local N=${1#-}
        N=${N%:*}
        if [[ "${1:0:1}" = "-" ]]
        then
            prefix_map[$N]=-
        fi
        __pull_recursive $N;
        shift 1
    done
}

fpull() {
    if [[ $# -eq 1 ]]
    then
        local category=none
    else
        local category=$1
        shift 1
    fi
    while [[ $# -gt 0 ]]
    do
        local -A written=()
        if [[ -n "${ignored[$1]}" ]]
        then
            ignored[$1]=""
            __pull_recursive $1;
            ignored[$1]="y"
        else
            __pull_recursive $1;
        fi
        shift 1
    done
}

__deps_recursive() {
    local X=$(basename $1)
    [[ -n "${written[$X]}" ]] && return
    if [[ -z "${paths_map[$X]}" ]]
    then
        echo "Error: $1"
        return
    fi
    local i
    written[$X]=y
    echo "$INDENT"$X
    local INDENT="."$INDENT
    for i in ${deps_map[$X]}
    do
        __deps_recursive $i
    done
}

deps(){
    local INDENT=""
    local -A written=()
    __deps_recursive $1;
}

gen-proprietary-files () {
    local i j f
    local -A output=()
    for i in ${!__pulled_files__[@]}
    do
        j="$(echo -n ${__pulled_files__[$i]} | tr ' ' '\n' | sort | uniq | tr '\n' ' ')"
        j="${j% }"
        [[ -z "${output[$j]}" ]] && 
            output[$j]="$i"  ||
            output[$j]+=" $i"
    done
    for i in "${!output[@]}"
    do
        echo -e "\n# $i"
        for j in ${output[$i]}
        do
            printf "%s%s\n" "${prefix_map[$j]}" "${paths_map[$j]}"
        done | sort
    done
}

tpull() {
    reset
    pull none $1
    gen-proprietary-files
}
